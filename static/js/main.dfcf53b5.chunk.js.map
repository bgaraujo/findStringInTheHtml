{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","response","setResponse","sites","setSites","scripts","setScripts","className","placeholder","cols","rows","value","onChange","e","target","type","onClick","arrSites","split","arrScripts","forEach","site","fetch","trim","then","data","text","Promise","resolve","html","matchScripts","map","script","status","indexOf","catch","error","console","log","obj","id","objScripts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4OAqFeA,MAlFf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACPC,EADO,KACEC,EADF,OAEWF,mBAAS,6BAFpB,mBAEPG,EAFO,KAEDC,EAFC,OAGeJ,qBAHf,mBAGPK,EAHO,KAGCC,EAHD,KA2Cb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,aACb,+FACA,8BAAUC,YAAY,2DAA2DC,KAAK,MAAMC,KAAK,KAAKC,MAAOR,EAAOS,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOH,UAErJ,6EACA,2BAAOI,KAAK,OAAOJ,MAAON,EAASO,SAAU,SAAAC,GAAC,OAAIP,EAAWO,EAAEC,OAAOH,UAEtE,4BAAQK,QAhDD,WACb,IAAMC,EAAWd,EAAMe,MAAM,KACvBC,EAAad,EAAQa,MAAM,KACjChB,EAAY,IAEZe,EAASG,SAAQ,SAAAC,GACfC,MAAMD,EAAKE,QACRC,MAAK,SAAAC,GAEJ,IAAIC,EAAOD,EAAKC,OACEC,QAAQC,QAAQF,GACtBF,MAAK,SAAAK,GAEf3B,EAAY,GAAD,mBAAKD,GAAL,CAAgB,CACzBoB,KAAKA,EACLS,aAAaX,EAAWY,KAAK,SAAAC,GAC3B,MAAO,CACLA,OAAOA,EACPC,SAAOJ,EAAKK,QAAQF,EAAOT,QAAQ,iBAM5CY,OAAM,SAASC,GAChBC,QAAQC,IAAIF,GACZlC,EAAY,GAAD,mBAAKD,GAAL,CAAgB,CACzBoB,KAAKA,EACLS,aAAa,GACbM,MAAM,sDAmBN,UAEA,6BAEInC,EAAS8B,KAAI,SAACQ,EAAIC,GAChB,OACE,wBAAIA,GAAIA,GACN,wBAAIjC,UAAU,SAASgC,EAAIlB,MAEzBkB,EAAIH,OAAS,4BAAKG,EAAIH,OAGtBG,EAAIT,aAAaC,KACjB,SAACU,EAAWD,GAAZ,OAAmB,wBAAIA,GAAIA,GAAKC,EAAWT,OAAO,IAA/B,IAAoC,4BAAQzB,UAAW,IAAIkC,EAAWR,QAASQ,EAAWR,OAAO,MAAM,2BCzD5HS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMqB,a","file":"static/js/main.dfcf53b5.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const[response,setResponse] = useState([]);\n  const[sites,setSites] = useState(\"https://www.claro.com.br/\");\n  const[scripts,setScripts] = useState();\n\n  const search = () => {\n    const arrSites = sites.split(\",\");\n    const arrScripts = scripts.split(\",\");\n    setResponse([]);\n\n    arrSites.forEach(site => {\n      fetch(site.trim())\n        .then(data => {\n          \n          var text = data.text();\n          var textPromise = Promise.resolve(text);\n          textPromise.then(html => {\n\n            setResponse([...response , {\n              site:site,\n              matchScripts:arrScripts.map( script => {\n                return {\n                  script:script,\n                  status:html.indexOf(script.trim())<0?false:true\n                }\n              })\n            }])\n\n          })\n      }).catch(function(error) {\n        console.log(error);\n        setResponse([...response , {\n          site:site,\n          matchScripts:[],\n          error:\"bloqueio de cors ou dominio inválido\"\n        }])\n      });;\n    });\n\n  }\n\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"container\">\n          <label>Coloque os dominios a serem escaneados separados por virgula</label>\n          <textarea placeholder=\"https://www.google.com, https://www.facebook.com.br, ...\" cols=\"100\" rows=\"10\" value={sites} onChange={e => setSites(e.target.value)}/>\n          \n          <label>Quais scripts ou css devem ser procurados?</label>\n          <input type=\"text\" value={scripts} onChange={e => setScripts(e.target.value)}/>\n          \n          <button onClick={search}>Buscar</button>\n\n          <div>\n            {\n              response.map((obj,id) => {\n                return (\n                  <ul id={id}>\n                    <li className=\"title\">{obj.site}</li>\n                    {\n                      obj.error && <li>{obj.error}</li>\n                    }\n                    {\n                      obj.matchScripts.map(\n                      (objScripts,id) => <li id={id}>{objScripts.script+\":\"} <strong className={\"_\"+objScripts.status}>{objScripts.status?\"tem\":\"Não tem\"}</strong></li>\n                      )\n                    }\n                  </ul>\n                )\n              })\n            }\n          </div>\n\n        </div>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}